{"version":3,"sources":["flipMatch.js","index.js"],"names":["Card","props","className","onClick","id","value","FlipMatch","state","current","cards","timeStart","time","nClear","nRow","nCol","totalCards","onInputRow","bind","onInputCol","this","initBoard","totalNum","nums","ranNums","ranCards","Array","fill","i","j","k","push","Math","floor","random","splice","pos","length","pop","setState","key","handleClick","isStart","display","document","getElementById","style","querySelector","toggleStart","start","Date","getTime","timer","setInterval","secs","min","strTime","padding","num","card","indexOf","slice","isStar","starIndex","setTimeout","clearInterval","backcard","currentCard","querySelectorAll","forEach","event","n","target","parseInt","isNaN","onInput","renderCard","boardStyle","width","boardWidth","height","type","disabled","disabledInput","defaultValue","restart","startTimer","React","Component","routes","path","component","exact","LinkItenm","label","to","activeOnlyWhenExact","match","useRouteMatch","RouterView","route","render","ReactDOM","map"],"mappings":"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","file":"static/js/main.02a3968e.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Card(props) {\n  return (\n    <div className=\"flip-card\" onClick={props.onClick} id={'card' + props.id}>\n      <div className=\"flip-card-inner\">\n        <div className=\"flip-card-front\">\n        </div>\n        <div className=\"flip-card-back\">\n          {props.value}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nclass FlipMatch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: [],\n      cards: [],\n      timeStart: 0,\n      time: \"0:00\",\n      nClear: 0,\n      nRow: 4,\n      nCol: 4,\n      totalCards: 16\n    }\n    this.onInputRow = this.onInputRow.bind(this);\n    this.onInputCol = this.onInputCol.bind(this);\n  }\n\n  componentDidMount() {\n    this.initBoard();\n  }\n\n  initBoard() {\n    const totalCards = this.state.nCol * this.state.nRow;\n    const totalNum = totalCards / 2;\n    let nums = [],\n      ranNums = [],\n      cards = [],\n      ranCards = Array(totalCards).fill(\"*\"),\n      i = totalCards,\n      j = 0;\n\n    for (let k = 0; k < totalCards; k++) {\n      nums.push(k);\n    }\n\n    for (let k = 1; k <= totalNum; k++) {\n      cards.push(k);\n      cards.push(k);\n    }\n\n    while (i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      ranNums.push(nums[j]);\n      nums.splice(j, 1);\n    }\n\n    for (let pos = 0; pos < totalCards; pos++) {\n      if (cards.length > 0) {\n        ranCards[ranNums[pos]] = cards.pop();\n      }\n    }\n\n    this.setState({ cards: ranCards, totalCards: totalCards });\n  }\n\n  renderCard(i) {\n    return <Card value={this.state.cards[i]} key={i} id={i} onClick={() => this.handleClick(i)} />\n  }\n\n  toggleStart(isStart) {\n    let display = isStart ? \"none\" : \"block\";\n    let className = isStart ? \"board\" : \"board not-start\";\n    const btn = document.getElementById(\"btnStart\");\n    btn.style.display = display;\n    const board = document.querySelector(\".board\");\n    board.className = className;\n  }\n  startTimer() {\n    this.toggleStart(true);\n    const start = new Date().getTime();\n    this.setState({\n      timeStart: start\n    });\n    this.timer = setInterval(() => {\n      let time = new Date().getTime() - this.state.timeStart;\n      let secs = Math.floor(time / 1000);\n      let min = 0;\n      if (secs > 60) {\n        min = Math.floor(secs / 60);\n      }\n      const strTime = min + \":\" + this.padding(secs);\n      this.setState({\n        time: strTime\n      })\n    }, 1000);\n  }\n\n  padding(num) {\n    if (num < 10) {\n      return \"0\" + num;\n    }\n    return num;\n  }\n\n  handleClick(i) {\n    let card = document.getElementById(\"card\" + i);\n    if (card && card.className.indexOf(\"hidden\") === -1) {\n      card.className += \" flip\";\n\n      let current = this.state.current.slice();\n      if (current.indexOf(i) > -1) {\n        return;\n      }\n      current.push(i);\n      this.setState({ current: current });\n      let isStar = false;\n      let starIndex = 0;\n      if( this.state.cards[current[0]] === \"*\") {\n        isStar = true;\n      }else if(this.state.cards[current[1]] === \"*\"){\n        starIndex = 1;\n        isStar = true;\n      }\n      if (current.length >= 2 || isStar) {\n        let nClear = this.state.nClear;\n        setTimeout(() => {\n          let className = \"flip-card\";\n          if (this.state.cards[current[0]] === this.state.cards[current[1]] || isStar) {\n            className += \" hidden\"\n            if (isStar) {\n              nClear++;\n            } else {\n              nClear = this.state.nClear + 2;\n            }\n            this.setState({ nClear: nClear });\n            if (nClear === this.state.totalCards) {\n              clearInterval(this.timer);\n            }\n          }\n          for (let j = 0; j < 2; j++) {\n            let backcard = document.getElementById(\"card\" + current[j]);\n            if (backcard) {\n              backcard.className = className;\n            }\n          }\n        }, 800);\n        let currentCard = this.state.current.slice(2);\n        if (isStar) {\n          currentCard = this.state.current.slice();\n          currentCard.splice(starIndex, 1);\n        }\n        this.setState({ current: currentCard });\n      }\n    }\n\n  }\n\n  restart() {\n    this.setState({\n      timeStart: 0,\n      nClear: 0,\n      time: \"0:00\"\n    })\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n    this.toggleStart(false);\n    this.initBoard();\n    const cards = document.querySelectorAll(\".flip-card\");\n    cards.forEach(card => {\n      setTimeout(() => {\n        card.className = \"flip-card\";\n      })\n    })\n  }\n\n  onInput(event, key) {\n    let n = 0;\n    if (event.target.value) {\n      n = parseInt(event.target.value);\n    }\n    if (isNaN(n) || !n) {\n      n = 4;\n    }\n    let state = {};\n    state[key] = n;\n    this.setState(state);\n    setTimeout(() => {\n      this.initBoard();\n    }, 100);\n  }\n\n  onInputRow(event) {\n    this.onInput(event, \"nRow\");\n  }\n\n  onInputCol(event) {\n    this.onInput(event, \"nCol\");\n  }\n\n  boardWidth(n) {\n    return ((n * 50) + ((2 * n) - 1)) + 'px';\n  }\n\n  disabledInput() {\n    return this.state.timeStart !== 0;\n  }\n\n  render() {\n    let cards = [];\n    for (let i = 0; i < this.state.totalCards; i++) {\n      cards.push(this.renderCard(i));\n    }\n    const w = this.boardWidth(this.state.nCol);\n    const h = this.boardWidth(this.state.nRow);\n    const boardStyle = {\n      width: w,\n      height: h\n    }\n    return (\n      <div>\n        <div className=\"div-amount\">\n          <span>Amount of rows: </span>\n          <input type=\"text\"\n            onInput={this.onInputRow}\n            disabled={this.disabledInput()}\n            defaultValue=\"4\" />\n        </div>\n        <div className=\"div-amount\">\n        <span>Amount of columns: </span>\n          <input type=\"text\"\n            onInput={this.onInputCol}\n            disabled={this.disabledInput()}\n            defaultValue=\"4\" />\n        </div>\n        <br />\n        <button className=\"btn\" onClick={() => this.restart()}>Restart</button>\n        <div className=\"div-time\">Time: {this.state.time}</div>\n        <br/>\n        <div className=\"board not-start\" style={boardStyle}>\n          <div className={this.state.nClear===this.state.totalCards?'div-clear':'hide'}>Clear!</div>\n          <div id=\"btnStart\" className=\"btn-start\"\n            onClick={() => {\n              this.startTimer();\n            }}>Start</div>\n          {cards}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FlipMatch;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport FlipMatch from './flipMatch.js';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch\n} from \"react-router-dom\";\n\nconst routes = [\n  {\n    path: \"/\",\n    component: Home,\n    exact: true\n  },\n  {\n    path: \"/matching\",\n    component: FlipMatch\n  }\n];\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Router>\n        <nav className=\"nav\">\n          <ul>\n            <LinkItenm to=\"/\" label=\"Home\" activeOnlyWhenExact={true} />\n            <LinkItenm to=\"/matching\" label=\"Matching Game\" />\n          </ul>\n        </nav>\n        <Switch>\n          {routes.map((route, i) => (\n            <RouterView key={i} {...route} />\n          ))}\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nfunction Home() {\n  return (\n    <div className=\"lb-home\">\n      <div className=\"txt-home\">Home</div>\n      <div className=\"lb l\"></div>\n      <div className=\"lb r\"></div>\n    </div>\n  );\n}\n\nfunction LinkItenm({ label, to, activeOnlyWhenExact }) {\n  let match = useRouteMatch({\n    path: to,\n    exact: activeOnlyWhenExact\n  });\n\n  return (\n    <li>\n      <Link to={to} className={match ? \"active\" : \"\"}>{label}</Link>\n    </li>\n  );\n}\n\nfunction RouterView(route) {\n  return (\n    <Route\n      path={route.path}\n      render={props => (\n        <route.component {...props} routes={route.routes} />\n      )}\n    />\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}